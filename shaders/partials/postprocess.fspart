#ifdef GL_ES
    #ifdef GL_FRAGMENT_PRECISION_HIGH
        precision highp float;
    #else
        precision mediump float;
    #endif
#endif

vec2 _rectSize;


ivec2 _uvToCoord(vec2 uv)
{
    return ivec2(uv * _rectSize);
}

vec2 _coordToUV(ivec2 rectPos)
{
    return vec2(rectPos) / _rectSize;
}

float _calculateAverage(sampler2D _inputTexture, ivec2 rectPos)
{
    vec4 c = TEXTURE2D(_inputTexture, _coordToUV(rectPos));
    return 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;
    // return (c.r + c.g + c.b) / 3.0;
}

int _levelFromAverage(float avg)
{
    return int(avg / 0.2);
}

vec4 _postproc_greyscale(sampler2D _inputTexture, vec2 tpos)
{
    vec4 sampled = TEXTURE2D(_inputTexture, tpos);
    float average = 0.2126 * sampled.r + 0.7152 * sampled.g + 0.0722 * sampled.b;
    return vec4(average, average, average, 1.0);
}

vec4 _postproc_dither(sampler2D _inputTexture, vec2 tpos)
{
    ivec2 rectPos = _uvToCoord(tpos);
    #ifdef GL_ES
        ivec2 rectPosUL = (rectPos / 2) * 2; // get rid of the last bit
    #else
        int mask = ~int(1);
        ivec2 rectPosUL = rectPos & mask;
    #endif
    ivec2 rectPosUR = ivec2(rectPosUL.x + 1, rectPosUL.y);
    ivec2 rectPosDL = ivec2(rectPosUL.x, rectPosUL.y + 1);
    ivec2 rectPosDR = ivec2(rectPosUL.x, rectPosUL.y + 1);

    float averageVal = _calculateAverage(_inputTexture, rectPosUL) / 4.0;
    averageVal += _calculateAverage(_inputTexture, rectPosUR) / 4.0;
    averageVal += _calculateAverage(_inputTexture, rectPosDL) / 4.0;
    averageVal += _calculateAverage(_inputTexture, rectPosDR) / 4.0;

    int level = _levelFromAverage(averageVal);
    vec4 on_color = vec4(0.8, 0.8, 0.5, 1.0), off_color = vec4(0.0, 0.0, 0.0, 1.0);
    // vec4 on_color = vec4(105.0/255.0, 18.0/255.0, 168.0/255.0, 1.0), off_color = vec4(17.0/255.0, 45.0/255.0, 94.0/255.0, 1.0);
    // float rel_level = float(level) / 4.0;
    // vec4 off_color_min = vec4(0.1f, 0.1f, 0.1f, 1.0), off_color_max = vec4(0.6f, 0.6f, 0.6f, 1.0);
    // vec4 on_color = TEXTURE2D(_inputTexture, tpos), off_color = mix(off_color_min, off_color_max, rel_level);

    if (rectPosUL == rectPos) return level >= 1 ? on_color : off_color;
    if (rectPosUR == rectPos) return level >= 4 ? on_color : off_color;
    if (rectPosDL == rectPos) return level >= 3 ? on_color : off_color;
    else return level >= 2 ? on_color : off_color;

    // return vec4(vec3(1.0) - (c).rgb, (c).a);
}

vec4 _postproc(sampler2D _inputTexture, vec2 tpos)
{
    vec4 sampled = TEXTURE2D(_inputTexture, tpos);
    vec4 grayscale = _postproc_dither(_inputTexture, tpos);

    vec2 rectPos = vec2(_uvToCoord(tpos));
    float distToMiddle = length(rectPos - (_rectSize / 2.0));
    float relDist = (2.0 * distToMiddle) / _rectSize.x;
    float cutoffMin = 0.72, cutoffMax = 0.95;
    float mixCoef = clamp((relDist - cutoffMin) / (cutoffMax - cutoffMin), 0.0, 1.0);

    return mix(sampled, grayscale, mixCoef);
}

#ifndef POSTPROCESS
    // #define POSTPROCESS(tex, tpos) (vec4(0.0, 1.0, 1.0, 1.0))
    // #define POSTPROCESS(tex, tpos) (TEXTURE2D((tex), (tpos)))
    #define POSTPROCESS(tex, tpos) (_postproc_dither((tex), (tpos)))
    // #define POSTPROCESS(tex, tpos) (_postproc_greyscale((tex), (tpos)))
    // #define POSTPROCESS(tex, tpos) (_postproc((tex), (tpos)))
#endif

#ifndef SETUP
    #define SETUP() _rectSize = rectSize;
#endif
